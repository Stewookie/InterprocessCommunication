import processing.video.*;
import oscP5.*;
import netP5.*;

OscP5 oscP5;
NetAddress myRemoteLocation;
int paramX;
int paramY;

Capture cam;

void setup() {
  size(320, 240);
  colorMode(RGB,255);
  frameRate(10);
  String[] cameras = Capture.list();
 
  if (cameras == null) {
    println("Failed to retrieve the list of available cameras, will try the default...");
    cam = new Capture(this, 128, 128);
  }else if (cameras.length == 0) {
    println("There are no cameras available for capture.");
    exit();
  } else {
    println("Available cameras:");
    for (int i = 0; i < cameras.length; i++) {
      println(cameras[i]);
    }
 
    // The camera can be initialized directly using an element
    // from the array returned by list():
    cam = new Capture(this, cameras[0]);
    // Or, the settings can be defined based on the text in the list
    //cam = new Capture(this, 640, 480, "Built-in iSight", 30);
 
    // Start capturing the images from the camera
    cam.start();
  }
  
 /* start oscP5, listening for incoming messages at port 8000 */
  oscP5 = new OscP5(this,8000);
  
  myRemoteLocation = new NetAddress("127.0.0.1",9000);
  
  oscP5.plug(this,"test","/test");
}


public void test(int theA, int theB) {
  println("### plug event method. received a message /test.");
  println(" 2 ints received: "+theA+", "+theB);  
}

void draw() {
  if (cam.available() == true) {
    cam.read();
  }

  cam.loadPixels();
  image(cam,0,0,128,128);
  
}

void mousePressed(){
 println(cam.get(0,0));
 sendMessage(10,20);
}

void captureEvent(Capture c) {
  c.read();
}

void sendMessage(int paramX, int paramY){

  /* createan osc message with address pattern /test */
  OscMessage myMessage = new OscMessage("/test");
  
  myMessage.add(paramX); /* add an int to the osc message */
  myMessage.add(paramY); /* add a second int to the osc message */

  /* send the message */
  oscP5.send(myMessage, myRemoteLocation); 
 
}

void sendPixel(){
    /* createan osc message with address pattern /test */
    loadPixels();
    cam.loadPixels();
   OscMessage myMessage = new OscMessage("/pixel");
   int w = 8;
   int h = 8;
    for(int x = 0; x < w; x++){
      for(int y = 0; y < h; y++){
          int loc = x + y * w;
          // The functions red(), green(), and blue() pull out the 3 color components from a pixel.
          float r = red(cam.pixels[loc]);
          float g = green(cam.pixels[loc]);
          float b = blue(cam.pixels[loc]);
          
          // Image Processing would go here
          // If we were to change the RGB values, we would do it here, 
          // before setting the pixel in the display window.
          
          // Set the display pixel to the image pixel
          color c = color(r,g,b);
          
          myMessage.add(hex(c,6));
         /* add an int to the osc message */
      }
    }
     updatePixels();
    /* send the message */
    oscP5.send(myMessage, myRemoteLocation); 
  
}

/* incoming osc message are forwarded to the oscEvent method. */
void oscEvent(OscMessage theOscMessage) {
  /* with theOscMessage.isPlugged() you check if the osc message has already been
   * forwarded to a plugged method. if theOscMessage.isPlugged()==true, it has already 
   * been forwared to another method in your sketch. theOscMessage.isPlugged() can 
   * be used for double posting but is not required.
  */  
  if(theOscMessage.isPlugged()==false) {
  /* print the address pattern and the typetag of the received OscMessage */
  println("### received an osc message.");
  println("### addrpattern\t"+theOscMessage.addrPattern());
  println("### typetag\t"+theOscMessage.typetag());
  
    if(theOscMessage.checkAddrPattern("/1/push1") == true){
      sendPixel();
      println("Sending Pixel Package");
    }
  }
}
